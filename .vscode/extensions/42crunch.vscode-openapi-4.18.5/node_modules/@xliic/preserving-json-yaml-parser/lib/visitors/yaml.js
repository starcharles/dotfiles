"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.visitYaml = void 0;
const yaml_language_server_parser_1 = require("yaml-language-server-parser");
function visitYaml(parent, key, node, visitor) {
    if (node.kind === yaml_language_server_parser_1.Kind.MAP) {
        visitor.onObjectStart(parent, key, node);
        for (const mapping of node.mappings) {
            visitYaml(node, mapping.key.value, mapping.value, visitor);
        }
        visitor.onObjectEnd();
    }
    else if (node.kind === yaml_language_server_parser_1.Kind.SEQ) {
        visitor.onArrayStart(parent, key, node);
        node.items.forEach((value, index) => {
            visitYaml(node, index, value, visitor);
        });
        visitor.onArrayEnd();
    }
    else if (node.kind === yaml_language_server_parser_1.Kind.ANCHOR_REF) {
        visitYaml(parent, key, node.value, visitor);
    }
    else if (node.kind === yaml_language_server_parser_1.Kind.SCALAR) {
        const [type, value] = parseYamlScalar(node);
        const text = reserializeYamlValue(type, node.value, value);
        if (typeof value)
            visitor.onValue(parent, key, value, text);
    }
}
exports.visitYaml = visitYaml;
// TODO honor YAML JSON mode
function parseYamlScalar(node) {
    const type = (0, yaml_language_server_parser_1.determineScalarType)(node);
    if (type === yaml_language_server_parser_1.ScalarType.int) {
        return [type, (0, yaml_language_server_parser_1.parseYamlInteger)(node.value)];
    }
    else if (type === yaml_language_server_parser_1.ScalarType.float) {
        return [type, (0, yaml_language_server_parser_1.parseYamlFloat)(node.value)];
    }
    else if (type === yaml_language_server_parser_1.ScalarType.bool) {
        return [type, (0, yaml_language_server_parser_1.parseYamlBoolean)(node.value)];
    }
    else if (type == yaml_language_server_parser_1.ScalarType.null) {
        return [type, null];
    }
    else {
        return [type, node.value];
    }
}
function reserializeYamlValue(type, text, value) {
    if (type === yaml_language_server_parser_1.ScalarType.int) {
        return reserializeYamlInt(text);
    }
    if (type === yaml_language_server_parser_1.ScalarType.float) {
        return reserializeYamlFloat(value);
    }
    return text;
}
function reserializeYamlInt(value) {
    if (value.indexOf("_") !== -1) {
        value = value.replace(/_/g, "");
    }
    let sign = BigInt(1);
    if (value[0] === "-" || value[0] === "+") {
        if (value[0] === "-")
            sign = BigInt(-1);
        value = value.slice(1);
    }
    const bigInt = sign * BigInt(value);
    return bigInt.toString();
}
function reserializeYamlFloat(value) {
    const serialized = JSON.stringify(value);
    if (serialized.includes("null") ||
        serialized.includes("e") ||
        serialized.includes("E") ||
        serialized.includes(".")) {
        return serialized;
    }
    return serialized + ".0";
}
