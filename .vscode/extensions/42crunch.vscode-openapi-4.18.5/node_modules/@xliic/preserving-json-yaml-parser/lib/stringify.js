"use strict";
/*
 Copyright (c) 42Crunch Ltd. All rights reserved.
 Licensed under the GNU Affero General Public License version 3. See LICENSE.txt in the project root for license information.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.stringify = void 0;
const object_1 = require("./visit/object");
function stringify(value, indent = 0) {
    return indent === 0 ? stringify_plain(value) : stringify_format(value, indent);
}
exports.stringify = stringify;
function stringify_plain(value) {
    // safeguard for falsy values
    if (!value) {
        return JSON.stringify(value);
    }
    const result = [];
    (0, object_1.visitObject)(undefined, "fakeroot", value, {
        onObjectStart: (parent, key, value) => {
            result.push(keyed(key, "{"));
        },
        onObjectEnd: () => {
            if (result[result.length - 1].endsWith(",")) {
                trimLastElement(result, 1);
            }
            result.push("},");
        },
        onArrayStart: (parent, key, value) => {
            result.push(keyed(key, "["));
        },
        onArrayEnd: () => {
            if (result[result.length - 1].endsWith(",")) {
                trimLastElement(result, 1);
            }
            result.push("],");
        },
        onValue: (parent, key, value, preserved) => {
            if (preserved !== undefined) {
                result.push(keyed(key, preserved) + ",");
            }
            else {
                result.push(keyed(key, JSON.stringify(value)) + ",");
            }
        },
    });
    // trim "fakeroot": and trailing comma
    result[0] = result[0].slice('"fakeroot":'.length);
    trimLastElement(result, 1);
    return result.join("");
}
function stringify_format(value, indent) {
    // safeguard for falsy values
    if (!value) {
        return JSON.stringify(value);
    }
    const result = [];
    let level = 0;
    const isEmpty = [true];
    (0, object_1.visitObject)(undefined, "fakeroot", value, {
        onObjectStart: (parent, key, value) => {
            result.push(padding(indent, level) + keyed(key, "{\n", false));
            // new object in the parent container, therefore it's not empty
            isEmpty[isEmpty.length - 1] = false;
            // this object is empty so far
            isEmpty.push(true);
            level++;
        },
        onObjectEnd: () => {
            level--;
            if (isEmpty.pop()) {
                // remove EOL to put closing brace on the same line, there is no comma to remove
                trimLastElement(result, 1);
                result.push("},\n");
            }
            else {
                // remove comma and EOL
                trimLastElement(result, 2);
                result.push("\n" + padding(indent, level) + "},\n");
            }
        },
        onArrayStart: (parent, key, value) => {
            result.push(padding(indent, level) + keyed(key, "[\n", false));
            // new array in the parent container, therefore it's not empty
            isEmpty[isEmpty.length - 1] = false;
            // this array is empty so far
            isEmpty.push(true);
            level++;
        },
        onArrayEnd: () => {
            level--;
            if (isEmpty.pop()) {
                // remove EOL to put closing brace on the same line, there is no comma to remove
                trimLastElement(result, 1);
                result.push("],\n");
            }
            else {
                // remove comma and EOL
                trimLastElement(result, 2);
                result.push("\n" + padding(indent, level) + "],\n");
            }
        },
        onValue: (parent, key, value, preserved) => {
            // mark current container as non-empty
            isEmpty[isEmpty.length - 1] = false;
            if (preserved !== undefined) {
                result.push(padding(indent, level) + keyed(key, preserved, false) + ",\n");
            }
            else {
                result.push(padding(indent, level) + keyed(key, JSON.stringify(value), false) + ",\n");
            }
        },
    });
    // trim "fakeroot": and trailing comma and EOL
    result[0] = result[0].slice('"fakeroot": '.length);
    trimLastElement(result, 2);
    return result.join("");
}
function trimLastElement(array, chars) {
    const lastIndex = array.length - 1;
    array[lastIndex] = array[lastIndex].slice(0, -chars);
}
function keyed(key, value, tight = true) {
    const separator = tight ? ":" : ": ";
    return typeof key === "string" ? JSON.stringify(key) + separator + value : value;
}
function padding(indent, level) {
    return " ".repeat(indent * level);
}
