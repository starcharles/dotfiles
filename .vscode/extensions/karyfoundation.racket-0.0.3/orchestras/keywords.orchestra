{"workspaceXML":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><block type=\"compose\" id=\"composer\" deletable=\"false\" x=\"80\" y=\"80\"><statement name=\"blocks\"><block type=\"encode\" id=\")JGunefUj:fb(vl5_eMW\"><field name=\"text\">(</field><next><block type=\"any_number_of\" id=\"b,Q!PO2X`UJhAjvI?_l}\"><statement name=\"blocks\"><block type=\"whitespace\" id=\"2[R%~v9xEYv(eN6M4*i%\"><field name=\"space\">TRUE</field><field name=\"tab\">TRUE</field><field name=\"linefeed\">TRUE</field></block></statement><next><block type=\"match\" id=\"j/mo3{OJ+G=/l[^EeQE)\"><statement name=\"blocks\"><block type=\"one_of\" id=\"BeLO5L7dECZpnLjS5UNK\"><statement name=\"blocks\"><block type=\"option\" id=\"bMIJKy7molXH77YPROAU\"><statement name=\"blocks\"><block type=\"encode\" id=\"ctrT4BTNc52m6WTUFrAF\"><field name=\"text\">#%app</field></block></statement><next><block type=\"option\" id=\"BFxh7R8b1VYigBrortdj\"><statement name=\"blocks\"><block type=\"encode\" id=\"FwD4nVFVeCRhcGF7bvVv\"><field name=\"text\">#%datum</field></block></statement><next><block type=\"option\" id=\"MRvU5s4eJCD7aiLAy1MI\"><statement name=\"blocks\"><block type=\"encode\" id=\"9yW6i1ikTkoUhgiH9XdT\"><field name=\"text\">#%declare</field></block></statement><next><block type=\"option\" id=\"M1BAmpW3qT9gQ46Ay3Mx\"><statement name=\"blocks\"><block type=\"encode\" id=\"Isf8kRLq2vbsrgkeH0Si\"><field name=\"text\">#%expression</field></block></statement><next><block type=\"option\" id=\"6FV20mXTrXGb8iRojUmc\"><statement name=\"blocks\"><block type=\"encode\" id=\"WbJm8k06FJyUbAQn1rI9\"><field name=\"text\">#%module-begin</field></block></statement><next><block type=\"option\" id=\"wN1Rxdtp6ZXIxh06yiQ4\"><statement name=\"blocks\"><block type=\"encode\" id=\"ElOSscPhCqKFbTkDzBiX\"><field name=\"text\">#%plain-app</field></block></statement><next><block type=\"option\" id=\"7PY9SzA0E0SzqUBY9FFb\"><statement name=\"blocks\"><block type=\"encode\" id=\"nZummMynGXIaLAh4aG8Q\"><field name=\"text\">#%plain-lambda</field></block></statement><next><block type=\"option\" id=\"MSSduxPjmwUuphUQtKZP\"><statement name=\"blocks\"><block type=\"encode\" id=\"C7dtDydnPoPMg2mqz2DY\"><field name=\"text\">#%plain-module-begin</field></block></statement><next><block type=\"option\" id=\"y6Y5cWcfX2PL9Y3NvRwA\"><statement name=\"blocks\"><block type=\"encode\" id=\"I8TidmMxVVihCBFcN6j5\"><field name=\"text\">#%printing-module-begin</field></block></statement><next><block type=\"option\" id=\"EJ2uVEX6hHHVEaRp1be3\"><statement name=\"blocks\"><block type=\"encode\" id=\"GDitDBwwKkyxfWLS5BoG\"><field name=\"text\">#%provide</field></block></statement><next><block type=\"option\" id=\"bcYryVgtRxs0QKd7kapX\"><statement name=\"blocks\"><block type=\"encode\" id=\"Qg9V9HPu8odMOi0fQgaJ\"><field name=\"text\">#%require</field></block></statement><next><block type=\"option\" id=\"nZ0207bHLabgkng3gFvP\"><statement name=\"blocks\"><block type=\"encode\" id=\"vaLAS5IkcJ5okRCbUvY4\"><field name=\"text\">#%stratified-body</field></block></statement><next><block type=\"option\" id=\"pYPcny7I4lGg7oulabLP\"><statement name=\"blocks\"><block type=\"encode\" id=\"FJNCfLPvif2dLeXaAHSG\"><field name=\"text\">#%top</field></block></statement><next><block type=\"option\" id=\"SaliTzbeLN1rGnQ5pjxg\"><statement name=\"blocks\"><block type=\"encode\" id=\"GYTs89LBREZdYr5ZGqPL\"><field name=\"text\">#%top-interaction</field></block></statement><next><block type=\"option\" id=\"RmXxT3Ea63pM2XfUCFVl\"><statement name=\"blocks\"><block type=\"encode\" id=\"DortAeKtCVW4KEAWr6w9\"><field name=\"text\">#%variable-reference</field></block></statement><next><block type=\"option\" id=\"7Qu9A6WRv7mR9tgnGi5X\"><statement name=\"blocks\"><block type=\"encode\" id=\"l8|nt*o#PB2:uTAlFX)]\"><field name=\"text\">...</field></block></statement><next><block type=\"option\" id=\"F3Kqrc64niFrtMkkMYcH\"><statement name=\"blocks\"><block type=\"encode\" id=\"aKd6jiLuk26RScItlYsc\"><field name=\"text\">:do-in</field></block></statement><next><block type=\"option\" id=\"tLzrCrWvwiA31gQhKZMB\"><statement name=\"blocks\"><block type=\"encode\" id=\"CbC1Fhj7fg08s9e2QKhD\"><field name=\"text\">=&gt;</field></block></statement><next><block type=\"option\" id=\"mPcNq0fKOH7YAW8Jlhjm\"><statement name=\"blocks\"><block type=\"encode\" id=\"YZRIIyeVNVujh0DjDFge\"><field name=\"text\">_</field></block></statement><next><block type=\"option\" id=\"GKq4d9MJv74g0tCdPh7W\"><statement name=\"blocks\"><block type=\"encode\" id=\"cQWzKRt5FK5pM0oaPpvs\"><field name=\"text\">all-defined-out</field></block></statement><next><block type=\"option\" id=\"ysMaCPoUG38OQc0zHVf6\"><statement name=\"blocks\"><block type=\"encode\" id=\"TfphzPjrE1N3upgHFQgk\"><field name=\"text\">all-from-out</field></block></statement><next><block type=\"option\" id=\"oZQg81ZMeTjj2FC9R92F\"><statement name=\"blocks\"><block type=\"encode\" id=\"YeGQJx3kXLnk1XMhvBe6\"><field name=\"text\">and</field></block></statement><next><block type=\"option\" id=\"60FRtDXPIWf8eFwGiwnw\"><statement name=\"blocks\"><block type=\"encode\" id=\"cPf57R2y9HuL2kimFOB9\"><field name=\"text\">apply</field></block></statement><next><block type=\"option\" id=\"Iyo5sECv1kNhZvtlSAYV\"><statement name=\"blocks\"><block type=\"encode\" id=\"fZfJ8cv46RepgduEiEfB\"><field name=\"text\">arity-at-least</field></block></statement><next><block type=\"option\" id=\"WadwW6qBzfFVwkJIMps6\"><statement name=\"blocks\"><block type=\"encode\" id=\"PIfYVWKP4BtDkyf7eRAi\"><field name=\"text\">begin</field></block></statement><next><block type=\"option\" id=\"Jw5hzLbgIyuzfjP222km\"><statement name=\"blocks\"><block type=\"encode\" id=\"yZ5kY7wfJVgFAPtLoILV\"><field name=\"text\">begin-for-syntax</field></block></statement><next><block type=\"option\" id=\"vV63o80gF58NuARvJJtU\"><statement name=\"blocks\"><block type=\"encode\" id=\"fftH41lyuGAXqQnb1AqW\"><field name=\"text\">begin0</field></block></statement><next><block type=\"option\" id=\"C1PttSu0LxbBJQ5xsSUn\"><statement name=\"blocks\"><block type=\"encode\" id=\"RkaRhilRPDZJNj4Rmzgo\"><field name=\"text\">call-with-input-file</field></block></statement><next><block type=\"option\" id=\"lnOv6otr5hU28Ntp2azn\"><statement name=\"blocks\"><block type=\"encode\" id=\"tBZaDukytlGyBemMYEQ5\"><field name=\"text\">call-with-input-file*</field></block></statement><next><block type=\"option\" id=\"vh9QIYLdYp04tjtP9O5G\"><statement name=\"blocks\"><block type=\"encode\" id=\"f91LR3dgHGkwcFY1pUs4\"><field name=\"text\">call-with-output-file</field></block></statement><next><block type=\"option\" id=\"NLwK81PBeSxmcJFQaKnz\"><statement name=\"blocks\"><block type=\"encode\" id=\"iJ242LtVCSHbbbr6aoMb\"><field name=\"text\">call-with-output-file*</field></block></statement><next><block type=\"option\" id=\"1Ckx5szKcaYjwdzFdlmw\"><statement name=\"blocks\"><block type=\"encode\" id=\"6dbCpRXVuJmbCGCs5OrW\"><field name=\"text\">case</field></block></statement><next><block type=\"option\" id=\"fKjBiLxgCQTbTlblH556\"><statement name=\"blocks\"><block type=\"encode\" id=\"8w6pe9JsFeylHqn0qAkJ\"><field name=\"text\">case-lambda</field></block></statement><next><block type=\"option\" id=\"WgMX49eIQwVHwUoZEqzK\"><statement name=\"blocks\"><block type=\"encode\" id=\"quF1MrPGxgvtqPEDJuE2\"><field name=\"text\">combine-in</field></block></statement><next><block type=\"option\" id=\"VKpx85SeDtnZMuu6EUhV\"><statement name=\"blocks\"><block type=\"encode\" id=\"sxy7rFD0U7oQN4mLeZ2H\"><field name=\"text\">combine-out</field></block></statement><next><block type=\"option\" id=\"F8VaOtt2FpFd7F98P0XX\"><statement name=\"blocks\"><block type=\"encode\" id=\"s8oKOHCD59O8Fh2w64PO\"><field name=\"text\">cond</field></block></statement><next><block type=\"option\" id=\"BErGCCiD58IUMgeJdIjT\"><statement name=\"blocks\"><block type=\"encode\" id=\"VCtG98jpLSchZWJSKxMC\"><field name=\"text\">date</field></block></statement><next><block type=\"option\" id=\"8xPUCN03rLdMVwNdepte\"><statement name=\"blocks\"><block type=\"encode\" id=\"rfPJfHCVVNf9ITHmXMj6\"><field name=\"text\">date*</field></block></statement><next><block type=\"option\" id=\"q24pE1Fo4EotKWKY15f6\"><statement name=\"blocks\"><block type=\"encode\" id=\"RCXeqdhgc9uzqUgc8Evf\"><field name=\"text\">define</field></block></statement><next><block type=\"option\" id=\"D1wQoxho2EfyPQeAzgQx\"><statement name=\"blocks\"><block type=\"encode\" id=\"a5u1YFKQofFB4wprbcun\"><field name=\"text\">define-for-syntax</field></block></statement><next><block type=\"option\" id=\"abpsvIsQ3XweQfc9rLaq\"><statement name=\"blocks\"><block type=\"encode\" id=\"tCcEDrBf7rYlgpOjVobu\"><field name=\"text\">define-logger</field></block></statement><next><block type=\"option\" id=\"RxpFmvXKcEjHSxusBC5Q\"><statement name=\"blocks\"><block type=\"encode\" id=\"G269SCJTOArZ5STBkjPU\"><field name=\"text\">define-namespace-anchor</field></block></statement><next><block type=\"option\" id=\"XRlEJdqe9sTJeFRCvwWS\"><statement name=\"blocks\"><block type=\"encode\" id=\"ISmTdpgzLzgTAmJX3rTk\"><field name=\"text\">define-sequence-syntax</field></block></statement><next><block type=\"option\" id=\"2xXDBFo2RaDINVcQ1laa\"><statement name=\"blocks\"><block type=\"encode\" id=\"16wI68cQYQ0FzmclX3kj\"><field name=\"text\">define-struct</field></block></statement><next><block type=\"option\" id=\"Rmyvz7480iNgJOBj6moo\"><statement name=\"blocks\"><block type=\"encode\" id=\"45WubuVZmLSO39hPwdCv\"><field name=\"text\">define-struct/derived</field></block></statement><next><block type=\"option\" id=\"S3rOPEGSjrvrht7GeTUY\"><statement name=\"blocks\"><block type=\"encode\" id=\"p1g65DV9K9f1SRFmcoYu\"><field name=\"text\">define-syntax</field></block></statement><next><block type=\"option\" id=\"d62WaM1yYRGhnnb8UOEt\"><statement name=\"blocks\"><block type=\"encode\" id=\"Ot1OHchi0o9Uu2XHi5zk\"><field name=\"text\">define-syntax-rule</field></block></statement><next><block type=\"option\" id=\"qNg48swlPxtKZUcgCbok\"><statement name=\"blocks\"><block type=\"encode\" id=\"ojIGu1BJuQGRybsrJ9PG\"><field name=\"text\">define-syntaxes</field></block></statement><next><block type=\"option\" id=\"Ju9iRoiUZ6QI7r4sdAWq\"><statement name=\"blocks\"><block type=\"encode\" id=\"yv0SuOVryOiof8JCg0mv\"><field name=\"text\">define-values</field></block></statement><next><block type=\"option\" id=\"O9coSnavslMBbOiXET6z\"><statement name=\"blocks\"><block type=\"encode\" id=\"ie45SqHFUcWDRiyaJR59\"><field name=\"text\">define-values-for-syntax</field></block></statement><next><block type=\"option\" id=\"qdvfeBqJnSYCohdWda5F\"><statement name=\"blocks\"><block type=\"encode\" id=\"d3cg1FEan0TSY2C0BYoS\"><field name=\"text\">do</field></block></statement><next><block type=\"option\" id=\"31QYPF6hHTzJR0sfURsJ\"><statement name=\"blocks\"><block type=\"encode\" id=\"7H6GlX9F3bEoop93qB18\"><field name=\"text\">else</field></block></statement><next><block type=\"option\" id=\"Yfnk11u86GThAiaWZHiU\"><statement name=\"blocks\"><block type=\"encode\" id=\"Qq7pY9tDIlzmgwy8mNDA\"><field name=\"text\">except-in</field></block></statement><next><block type=\"option\" id=\"zatfMpRaLea8LHysbd6D\"><statement name=\"blocks\"><block type=\"encode\" id=\"xsZTutXCUWLt54ZXzB5v\"><field name=\"text\">except-out</field></block></statement><next><block type=\"option\" id=\"OzVRGWTYVmVjHbT6BWWE\"><statement name=\"blocks\"><block type=\"encode\" id=\"xGrUfYMVCNVsNcSENW3j\"><field name=\"text\">exn</field></block></statement><next><block type=\"option\" id=\"BwO2KkSNfwPDxCtN2NRc\"><statement name=\"blocks\"><block type=\"encode\" id=\"9oP5JMrOV1ON7lxZ1L0c\"><field name=\"text\">exn:break</field></block></statement><next><block type=\"option\" id=\"ncs74d5vDZHlnLNSs9xR\"><statement name=\"blocks\"><block type=\"encode\" id=\"bNPah0S35IYPcIW6oBkl\"><field name=\"text\">exn:break:hang-up</field></block></statement><next><block type=\"option\" id=\"ABs3nKkvx5eV4DkboTA4\"><statement name=\"blocks\"><block type=\"encode\" id=\"uqbddmaLvwi6q5fp6l4c\"><field name=\"text\">exn:break:terminate</field></block></statement><next><block type=\"option\" id=\"RF2YSpGqgGXTGom7ZZ9o\"><statement name=\"blocks\"><block type=\"encode\" id=\"vRWrMAyARd71pKh5Iolr\"><field name=\"text\">exn:fail</field></block></statement><next><block type=\"option\" id=\"UbF6KFqGGa5yThDSkgsz\"><statement name=\"blocks\"><block type=\"encode\" id=\"HyCWjzHZXpTkO7gJsD03\"><field name=\"text\">exn:fail:contract</field></block></statement><next><block type=\"option\" id=\"AR1AeLR5iRwY7u0iHRAF\"><statement name=\"blocks\"><block type=\"encode\" id=\"NuPFxmuLbpt0JxjiXmwi\"><field name=\"text\">exn:fail:contract:arity</field></block></statement><next><block type=\"option\" id=\"aaPAXWfyqlQZDSwmqeON\"><statement name=\"blocks\"><block type=\"encode\" id=\"xkkBdwEQev34jCo6XEnc\"><field name=\"text\">exn:fail:contract:continuation</field></block></statement><next><block type=\"option\" id=\"V3el9LnqoiSdo2FKRjHS\"><statement name=\"blocks\"><block type=\"encode\" id=\"oBnBD36OSkt9S7f5eb5v\"><field name=\"text\">exn:fail:contract:divide-by-zero</field></block></statement><next><block type=\"option\" id=\"b1Rzmz4XAGVxgt0Rj7sk\"><statement name=\"blocks\"><block type=\"encode\" id=\"YhmPzYhAIrmOJOc83Vos\"><field name=\"text\">exn:fail:contract:non-fixnum-result</field></block></statement><next><block type=\"option\" id=\"OV1MbyoALFr20rDCZxFZ\"><statement name=\"blocks\"><block type=\"encode\" id=\"sumSBmsqKGtgpg27FjeX\"><field name=\"text\">exn:fail:contract:variable</field></block></statement><next><block type=\"option\" id=\"XExhxOdyNRgwTzOXo4px\"><statement name=\"blocks\"><block type=\"encode\" id=\"fP3YlF77YidHMsCcvZHM\"><field name=\"text\">exn:fail:filesystem</field></block></statement><next><block type=\"option\" id=\"cNDqxf80KZR3FphBVoxI\"><statement name=\"blocks\"><block type=\"encode\" id=\"KY5toQcICLUqLKf61YDI\"><field name=\"text\">exn:fail:filesystem:errno</field></block></statement><next><block type=\"option\" id=\"ue6LtYb9usUjaMFXX6jF\"><statement name=\"blocks\"><block type=\"encode\" id=\"XVCdB9v0Jlv1LHTOhTn3\"><field name=\"text\">exn:fail:filesystem:exists</field></block></statement><next><block type=\"option\" id=\"xmDilntuxs7pqb38dLEf\"><statement name=\"blocks\"><block type=\"encode\" id=\"ftDEjcuXJur7QTaRtGEw\"><field name=\"text\">exn:fail:filesystem:missing-module</field></block></statement><next><block type=\"option\" id=\"UVHxy3gFZIAyTvnAlqGj\"><statement name=\"blocks\"><block type=\"encode\" id=\"FSQAgt6xcIxfmQlCicDB\"><field name=\"text\">exn:fail:filesystem:version</field></block></statement><next><block type=\"option\" id=\"GUOw2GF9HE3zar96dhKq\"><statement name=\"blocks\"><block type=\"encode\" id=\"rKds6iabkyxdkgNZnb1u\"><field name=\"text\">exn:fail:network</field></block></statement><next><block type=\"option\" id=\"wj9dGbdbCJyc8jRQcJn5\"><statement name=\"blocks\"><block type=\"encode\" id=\"R8Fljysx3kqpwvqtHuwd\"><field name=\"text\">exn:fail:network:errno</field></block></statement><next><block type=\"option\" id=\"gpK1IF050MvhBsHMS53b\"><statement name=\"blocks\"><block type=\"encode\" id=\"VO5ti67PiuV7XIViZoqf\"><field name=\"text\">exn:fail:out-of-memory</field></block></statement><next><block type=\"option\" id=\"oLFdwi7TVAE58hFm1BKK\"><statement name=\"blocks\"><block type=\"encode\" id=\"rqhnsBkRwyoJCuhL0oJi\"><field name=\"text\">exn:fail:read</field></block></statement><next><block type=\"option\" id=\"MMZtd729d9NBGgzc8hlb\"><statement name=\"blocks\"><block type=\"encode\" id=\"N4drovpP5tJeqn19HBhi\"><field name=\"text\">exn:fail:read:eof</field></block></statement><next><block type=\"option\" id=\"jDSwACNaXINDIYT4GBC3\"><statement name=\"blocks\"><block type=\"encode\" id=\"pNjxIE4qKJf6BtB8FAEI\"><field name=\"text\">exn:fail:read:non-char</field></block></statement><next><block type=\"option\" id=\"0TaIGsifCJDjG3bjQLYO\"><statement name=\"blocks\"><block type=\"encode\" id=\"wx7gOxGXOIKnn5poqjy2\"><field name=\"text\">exn:fail:syntax</field></block></statement><next><block type=\"option\" id=\"p3Ru4pFeZn8tTnA6EFu3\"><statement name=\"blocks\"><block type=\"encode\" id=\"KfEr504J6TgRf5804J1r\"><field name=\"text\">exn:fail:syntax:missing-module</field></block></statement><next><block type=\"option\" id=\"SlhtojyXFkVQK6ej62l0\"><statement name=\"blocks\"><block type=\"encode\" id=\"hWtGzKXLurT72WWuafYz\"><field name=\"text\">exn:fail:syntax:unbound</field></block></statement><next><block type=\"option\" id=\"qusyHOJwMtuLSksqQ5sl\"><statement name=\"blocks\"><block type=\"encode\" id=\"aFa5wt4jNDQeKv5eXevR\"><field name=\"text\">exn:fail:unsupported</field></block></statement><next><block type=\"option\" id=\"Wajylw8o6hCwBSH27fvZ\"><statement name=\"blocks\"><block type=\"encode\" id=\"CcNfnClcotHDaDSLwcyX\"><field name=\"text\">exn:fail:user</field></block></statement><next><block type=\"option\" id=\"UVJRNWSVTqwlqUgR1eFP\"><statement name=\"blocks\"><block type=\"encode\" id=\"KthOnGUJ6SWMcfkOI7as\"><field name=\"text\">file</field></block></statement><next><block type=\"option\" id=\"31jzhitnBSgRim8YtpjL\"><statement name=\"blocks\"><block type=\"encode\" id=\"W4os9cOn5kvle7Sp3nvv\"><field name=\"text\">for</field></block></statement><next><block type=\"option\" id=\"yfvYJUs3fNJsc0GCaQRI\"><statement name=\"blocks\"><block type=\"encode\" id=\"fEBaN1pHHYaOUbA57gwX\"><field name=\"text\">for*</field></block></statement><next><block type=\"option\" id=\"2btHRlu1efkV5pPcwiqh\"><statement name=\"blocks\"><block type=\"encode\" id=\"v7ZHDsuwj9VZCGKPuTZW\"><field name=\"text\">for*/and</field></block></statement><next><block type=\"option\" id=\"XlQNtjw8ATKM84URlgXH\"><statement name=\"blocks\"><block type=\"encode\" id=\"3WCBUeJoqGhDBVYmktkc\"><field name=\"text\">for*/first</field></block></statement><next><block type=\"option\" id=\"HLTVNShseovzEeDVFbUl\"><statement name=\"blocks\"><block type=\"encode\" id=\"li6GPi4qcEuoCM8kwNOZ\"><field name=\"text\">for*/fold</field></block></statement><next><block type=\"option\" id=\"Gl4Khp7UUiwyhljJDr4b\"><statement name=\"blocks\"><block type=\"encode\" id=\"Kuu0Phira8PmVXAZj1Id\"><field name=\"text\">for*/fold/derived</field></block></statement><next><block type=\"option\" id=\"qSphGw5yMuM5ajpLAlw3\"><statement name=\"blocks\"><block type=\"encode\" id=\"XdDs6UOghBM020dwS7wV\"><field name=\"text\">for*/hash</field></block></statement><next><block type=\"option\" id=\"IqfOn1Idhohpb0BDmTzI\"><statement name=\"blocks\"><block type=\"encode\" id=\"2xgNyb1orvunaogAAl9g\"><field name=\"text\">for*/hasheq</field></block></statement><next><block type=\"option\" id=\"Ywn5bj73g5l0rzh2otmD\"><statement name=\"blocks\"><block type=\"encode\" id=\"ZneP3yaXGZCPUxTcL0Cq\"><field name=\"text\">for*/hasheqv</field></block></statement><next><block type=\"option\" id=\"UtCb8AfDE2idlYpOhGpD\"><statement name=\"blocks\"><block type=\"encode\" id=\"VBIQnlGgtQNYFYHtKnEb\"><field name=\"text\">for*/last</field></block></statement><next><block type=\"option\" id=\"iqp2zaMkTLw4kddmZgOE\"><statement name=\"blocks\"><block type=\"encode\" id=\"p0L8DXIT1tJcVYCIUtfd\"><field name=\"text\">for*/list</field></block></statement><next><block type=\"option\" id=\"bLcgg1FFvKiiFXWnK22e\"><statement name=\"blocks\"><block type=\"encode\" id=\"o0Efd1iUtB6UcBpuOCy7\"><field name=\"text\">for*/lists</field></block></statement><next><block type=\"option\" id=\"ZsHDqD3pLWgZt3r1bNj5\"><statement name=\"blocks\"><block type=\"encode\" id=\"C2Uw90WgavutiQLQieGP\"><field name=\"text\">for*/or</field></block></statement><next><block type=\"option\" id=\"eY1hVfpuECCqgzRJ61Ds\"><statement name=\"blocks\"><block type=\"encode\" id=\"AXfrdWx4c5eFPYutaLyt\"><field name=\"text\">for*/product</field></block></statement><next><block type=\"option\" id=\"LaWBnrgjBHC43dkK8l1m\"><statement name=\"blocks\"><block type=\"encode\" id=\"9MEyHzWgeklcmanOiRIM\"><field name=\"text\">for*/set</field></block></statement><next><block type=\"option\" id=\"6kh3XQj8WtanYem6qUCq\"><statement name=\"blocks\"><block type=\"encode\" id=\"xgwXTL6frw4QmemJ1zz1\"><field name=\"text\">for*/seteq</field></block></statement><next><block type=\"option\" id=\"3YzyeJar3CDoU8vIfsDy\"><statement name=\"blocks\"><block type=\"encode\" id=\"EJTOoPI0hHtakb3qkrB4\"><field name=\"text\">for*/seteqv</field></block></statement><next><block type=\"option\" id=\"ZEW3P58rMlhI9Z8XR4rS\"><statement name=\"blocks\"><block type=\"encode\" id=\"56Jvwu0RcP8ZqNqLAEGS\"><field name=\"text\">for*/sum</field></block></statement><next><block type=\"option\" id=\"kTaekQ2HePfyWDjtPEPI\"><statement name=\"blocks\"><block type=\"encode\" id=\"AbHumFTWGtqbVZ0DLdhN\"><field name=\"text\">for*/vector</field></block></statement><next><block type=\"option\" id=\"6TuVg1M2ZsqEAMlwpM0T\"><statement name=\"blocks\"><block type=\"encode\" id=\"533nkaQnj0t0G9hH9G2c\"><field name=\"text\">for-label</field></block></statement><next><block type=\"option\" id=\"gtFGj5YKJdqIq6BHOvY4\"><statement name=\"blocks\"><block type=\"encode\" id=\"AbW1Odqq6dF34yM6fr44\"><field name=\"text\">for-meta</field></block></statement><next><block type=\"option\" id=\"dsuxEZw7dDhpnrWiMNJE\"><statement name=\"blocks\"><block type=\"encode\" id=\"nEymWOGbReGyJbG9Xy3b\"><field name=\"text\">for-syntax</field></block></statement><next><block type=\"option\" id=\"peI20ra7a54W7sYL3kmp\"><statement name=\"blocks\"><block type=\"encode\" id=\"0QZMEUWSvN4MxOrt1hPI\"><field name=\"text\">for-template</field></block></statement><next><block type=\"option\" id=\"OnJ47QItUNkYA5lc6hCZ\"><statement name=\"blocks\"><block type=\"encode\" id=\"m9tFnGuplEgfeecE4jA0\"><field name=\"text\">for/and</field></block></statement><next><block type=\"option\" id=\"R7voBZr5w8nvXzal51j8\"><statement name=\"blocks\"><block type=\"encode\" id=\"bEc0L9LW7chhmo8HgDab\"><field name=\"text\">for/first</field></block></statement><next><block type=\"option\" id=\"SuErgrKrDsEJMdGnJaOw\"><statement name=\"blocks\"><block type=\"encode\" id=\"cx4wMm6b4BuJBGxYAjJY\"><field name=\"text\">for/fold</field></block></statement><next><block type=\"option\" id=\"D3Jmrr7WVC1O42aeWeGP\"><statement name=\"blocks\"><block type=\"encode\" id=\"5mC2h6z76627IOSEweoo\"><field name=\"text\">for/fold/derived</field></block></statement><next><block type=\"option\" id=\"XlCRAtEkChMo8lZu576S\"><statement name=\"blocks\"><block type=\"encode\" id=\"dgTfnS6wVwprCTtanSYG\"><field name=\"text\">for/hash</field></block></statement><next><block type=\"option\" id=\"harlqMyPOsLVLMjfoVUF\"><statement name=\"blocks\"><block type=\"encode\" id=\"r7dYps8EgsQLzQX6aVpT\"><field name=\"text\">for/hasheq</field></block></statement><next><block type=\"option\" id=\"Wauy5JtA6ZCzeeEYCuOW\"><statement name=\"blocks\"><block type=\"encode\" id=\"08GozgOIKRvoRpIcPETJ\"><field name=\"text\">for/hasheqv</field></block></statement><next><block type=\"option\" id=\"6NsdkqAr1nX5JjmnrXJz\"><statement name=\"blocks\"><block type=\"encode\" id=\"JoRsZt3szwQjsKleefzQ\"><field name=\"text\">for/last</field></block></statement><next><block type=\"option\" id=\"78OofggLk1ehQ1hY3jDV\"><statement name=\"blocks\"><block type=\"encode\" id=\"b7EXzDNrxoJQMWZV9Pf8\"><field name=\"text\">for/list</field></block></statement><next><block type=\"option\" id=\"XoXjNadNnl8aYNQVtR9I\"><statement name=\"blocks\"><block type=\"encode\" id=\"Zd4ttK1Lej1etEd9kMFP\"><field name=\"text\">for/lists</field></block></statement><next><block type=\"option\" id=\"dqOTVqoGfz26EHCLeg0K\"><statement name=\"blocks\"><block type=\"encode\" id=\"IdvY51bcXlj2NEuWmtlq\"><field name=\"text\">for/or</field></block></statement><next><block type=\"option\" id=\"D0SlpGeSGMItD6S0wh23\"><statement name=\"blocks\"><block type=\"encode\" id=\"hHf5F8q6RDdXxPU5t6sL\"><field name=\"text\">for/product</field></block></statement><next><block type=\"option\" id=\"Htco5DnN9OspYNP2xemj\"><statement name=\"blocks\"><block type=\"encode\" id=\"HaagEgSE0Px50ba3TL1F\"><field name=\"text\">for/sum</field></block></statement><next><block type=\"option\" id=\"fG01r1RCcfDEJnkZIxHj\"><statement name=\"blocks\"><block type=\"encode\" id=\"fut8esLmNzKi0m0mn05q\"><field name=\"text\">for/set</field></block></statement><next><block type=\"option\" id=\"DFcnMFQ9UhkdTWrN0AeD\"><statement name=\"blocks\"><block type=\"encode\" id=\"bSNUGqxAWX45BIPklWkA\"><field name=\"text\">for/seteq</field></block></statement><next><block type=\"option\" id=\"7fGOvu5cTDQabIA2kjby\"><statement name=\"blocks\"><block type=\"encode\" id=\"21MENNlya6OnGCbq1LJv\"><field name=\"text\">for/seteqv</field></block></statement><next><block type=\"option\" id=\"EGrobssUE9Zvnb4f1Ylg\"><statement name=\"blocks\"><block type=\"encode\" id=\"PmUXPMsqiiv5P3eBLazh\"><field name=\"text\">for/vector</field></block></statement><next><block type=\"option\" id=\"b7RX8FFRTw0TTJV39nVi\"><statement name=\"blocks\"><block type=\"encode\" id=\"XCgeQq1rPFcm4FkrDNI0\"><field name=\"text\">gen:custom-write</field></block></statement><next><block type=\"option\" id=\"evXRj8OD8CzMybNLSVwz\"><statement name=\"blocks\"><block type=\"encode\" id=\"iUkcLbWBaNvPoY59GHhs\"><field name=\"text\">gen:equa</field></block></statement><next><block type=\"option\" id=\"2%.ipr+mlx~jU,B(~?7s\"><statement name=\"blocks\"><block type=\"encode\" id=\"MT1MJqijbOsyP8Nl5iTV\"><field name=\"text\">hash</field></block></statement><next><block type=\"option\" id=\"4iOTHfCmBb2StYSZZK5e\"><statement name=\"blocks\"><block type=\"encode\" id=\"e7tfQsZyt0ko5bk2jb42\"><field name=\"text\">if</field></block></statement><next><block type=\"option\" id=\"LB9VxlG8UiU0OprgIanJ\"><statement name=\"blocks\"><block type=\"encode\" id=\"liEGXmNdzvUonm7T39Iy\"><field name=\"text\">in-bytes</field></block></statement><next><block type=\"option\" id=\"Qg1g821TGGW4Mce1vVwd\"><statement name=\"blocks\"><block type=\"encode\" id=\"zNd4hEkHNXULT2CtVT1a\"><field name=\"text\">in-bytes-lines</field></block></statement><next><block type=\"option\" id=\"25tezLzvXJvLgBkDKuBj\"><statement name=\"blocks\"><block type=\"encode\" id=\"sp9iODFC9JLM2pehDRIG\"><field name=\"text\">in-directory</field></block></statement><next><block type=\"option\" id=\"GQWaZWaQFmdtJUuCWR1m\"><statement name=\"blocks\"><block type=\"encode\" id=\"Gcx8b05T7zA8Jx6UpLxu\"><field name=\"text\">in-indexed</field></block></statement><next><block type=\"option\" id=\"Sc6JsaL2uQ7vJiGYhF65\"><statement name=\"blocks\"><block type=\"encode\" id=\"6ARWr5viZTGTQa7EOl7i\"><field name=\"text\">in-input-port-bytes</field></block></statement><next><block type=\"option\" id=\"EOz97PvgtRqaK5nH2yDI\"><statement name=\"blocks\"><block type=\"encode\" id=\"HuJO9NsgO24LL03wFLmf\"><field name=\"text\">in-input-port-chars</field></block></statement><next><block type=\"option\" id=\"4agnvEMS9Wyj7yqFxKMb\"><statement name=\"blocks\"><block type=\"encode\" id=\"QhkVm6wYpkXPRqY07n1q\"><field name=\"text\">in-lines</field></block></statement><next><block type=\"option\" id=\"I5IRjKgibBqZXZPwdbYn\"><statement name=\"blocks\"><block type=\"encode\" id=\"pqB40sQZ3C7WgfswPUoP\"><field name=\"text\">in-list</field></block></statement><next><block type=\"option\" id=\"Ju2n1lyBH14zc4fyrV5N\"><statement name=\"blocks\"><block type=\"encode\" id=\"QfPtBYCbQsurNK2q2oBt\"><field name=\"text\">in-mlist</field></block></statement><next><block type=\"option\" id=\"LMmmDHeIMYEBBdH1BbA9\"><statement name=\"blocks\"><block type=\"encode\" id=\"wlazkUTvI9JEf523nx0e\"><field name=\"text\">in-naturals</field></block></statement><next><block type=\"option\" id=\"YKz9wBpmn4iUvJk2bQvH\"><statement name=\"blocks\"><block type=\"encode\" id=\"s0vjLQLp46iyQLvjagiG\"><field name=\"text\">in-port</field></block></statement><next><block type=\"option\" id=\"Mtqq9p7HoQ6CL1Cwt9sn\"><statement name=\"blocks\"><block type=\"encode\" id=\"D6vFZpansr20Aj7UqLL1\"><field name=\"text\">in-producer</field></block></statement><next><block type=\"option\" id=\"FkvsgMpDfbimrwXM9Ltx\"><statement name=\"blocks\"><block type=\"encode\" id=\"8D1DnCLkCT2sPtkNzARO\"><field name=\"text\">in-range</field></block></statement><next><block type=\"option\" id=\"oTuGwBPFoqN88ZQMBoUt\"><statement name=\"blocks\"><block type=\"encode\" id=\"ed1g67XOcxzoGKSEYtfV\"><field name=\"text\">in-string</field></block></statement><next><block type=\"option\" id=\"iokCu8P6lz2goTPHyqZj\"><statement name=\"blocks\"><block type=\"encode\" id=\"t5SUg31ty7I8RFfopEA1\"><field name=\"text\">in-value</field></block></statement><next><block type=\"option\" id=\"9DY2hVlRFk3cnFINBR09\"><statement name=\"blocks\"><block type=\"encode\" id=\"emFDF4XkJb0zLBouNome\"><field name=\"text\">in-vector</field></block></statement><next><block type=\"option\" id=\"nKGrfTNfxqIp4d6PtmWg\"><statement name=\"blocks\"><block type=\"encode\" id=\"TT7MkeDx3nbP8Aaa6lBJ\"><field name=\"text\">lambda</field></block></statement><next><block type=\"option\" id=\"Y6yVjcJLm5Yas45mJ5oY\"><statement name=\"blocks\"><block type=\"encode\" id=\"mCzbe4MxrlYdjLc8wBUR\"><field name=\"text\">let</field></block></statement><next><block type=\"option\" id=\"jWqNbAETM5qiYA8RNnEE\"><statement name=\"blocks\"><block type=\"encode\" id=\"2lnyTZkfMSa37upzXNTT\"><field name=\"text\">let*</field></block></statement><next><block type=\"option\" id=\"CxNdadgbimq0tip0MoBQ\"><statement name=\"blocks\"><block type=\"encode\" id=\"B71G4Zy8F4dRbMGe6oI0\"><field name=\"text\">let*-values</field></block></statement><next><block type=\"option\" id=\"8DfdVKfky9CIEFIWDoKD\"><statement name=\"blocks\"><block type=\"encode\" id=\"Gv8eo8pOJahXvZmG1V7g\"><field name=\"text\">let-syntax</field></block></statement><next><block type=\"option\" id=\"A7SOTx499lN0Un0RP1n5\"><statement name=\"blocks\"><block type=\"encode\" id=\"bRXTjAYxL1xpUxFhXQ0V\"><field name=\"text\">let-syntaxes</field></block></statement><next><block type=\"option\" id=\"JbTZdacpF8PXdEjsTj9G\"><statement name=\"blocks\"><block type=\"encode\" id=\"9mrA1TXkymPg2kUKA5qS\"><field name=\"text\">let-values</field></block></statement><next><block type=\"option\" id=\"U7LvmXXRGmygaQgOpEcM\"><statement name=\"blocks\"><block type=\"encode\" id=\"0iGtgUzkQzTyQNem6iJk\"><field name=\"text\">let/cc</field></block></statement><next><block type=\"option\" id=\"TsC9KT3lfOriwMoVeYBm\"><statement name=\"blocks\"><block type=\"encode\" id=\"35hE3AWDVsoR171pcf44\"><field name=\"text\">let/ec</field></block></statement><next><block type=\"option\" id=\"1w0XGyRlsgjxFpA0D6Ji\"><statement name=\"blocks\"><block type=\"encode\" id=\"cyUKm3GT7Ab3qdsBiJhK\"><field name=\"text\">letrec</field></block></statement><next><block type=\"option\" id=\"u9XAaIir1sg1yzxTIqQa\"><statement name=\"blocks\"><block type=\"encode\" id=\"SVWSEVajxF5BklbWcYCd\"><field name=\"text\">letrec-syntax</field></block></statement><next><block type=\"option\" id=\"aNFmmnMKxeACEzi0oLhb\"><statement name=\"blocks\"><block type=\"encode\" id=\"Mr5slIgRvRMEKiIJymDB\"><field name=\"text\">letrec-syntaxes</field></block></statement><next><block type=\"option\" id=\"tzpYgubKLB7oFcrkByfD\"><statement name=\"blocks\"><block type=\"encode\" id=\"ItCrGdno1V1fFlZ5oYRc\"><field name=\"text\">letrec-syntaxes+values</field></block></statement><next><block type=\"option\" id=\"QCGmzsXB6Cmv3Bi6iZQm\"><statement name=\"blocks\"><block type=\"encode\" id=\"B1rIGPbZs5EO2MUp0KVm\"><field name=\"text\">letrec-values</field></block></statement><next><block type=\"option\" id=\"BNSdSuqtA7DMziFlqnzg\"><statement name=\"blocks\"><block type=\"encode\" id=\"yw5LYn0jnAaiAJU2YVgw\"><field name=\"text\">lib</field></block></statement><next><block type=\"option\" id=\"dR2D8dH248goXhhFCYTV\"><statement name=\"blocks\"><block type=\"encode\" id=\"Wp4tT90CV7n9ZcDGEFkZ\"><field name=\"text\">local-require</field></block></statement><next><block type=\"option\" id=\"idyyFJLXMxzj3EgLnrNs\"><statement name=\"blocks\"><block type=\"encode\" id=\"Kc2SvZycs8WXrFML53X0\"><field name=\"text\">log-debug</field></block></statement><next><block type=\"option\" id=\"rkXWwWvmXS7TDBlzGdsV\"><statement name=\"blocks\"><block type=\"encode\" id=\"fwjzmzkphsyRjYihBObt\"><field name=\"text\">log-error</field></block></statement><next><block type=\"option\" id=\"JDlsFLDWtXoNS6o4uZfO\"><statement name=\"blocks\"><block type=\"encode\" id=\"T8lfapjgxEz1JPu3wBlm\"><field name=\"text\">log-fatal</field></block></statement><next><block type=\"option\" id=\"9GrErV8KGeBP0TYTBCUq\"><statement name=\"blocks\"><block type=\"encode\" id=\"9K7r5ul234WPnDnOeukp\"><field name=\"text\">log-info</field></block></statement><next><block type=\"option\" id=\"zfxldG4o1WEPbnMuqC1w\"><statement name=\"blocks\"><block type=\"encode\" id=\"3tQTcKmeuAlEdaYzbgu1\"><field name=\"text\">log-warning</field></block></statement><next><block type=\"option\" id=\"YIZPmhyEng5Qr4kKQsu3\"><statement name=\"blocks\"><block type=\"encode\" id=\"80OY4i9RWQzQciAMFiY5\"><field name=\"text\">module</field></block></statement><next><block type=\"option\" id=\"SkD4HpXbPBIf49YL604u\"><statement name=\"blocks\"><block type=\"encode\" id=\"C97NtWwLnxUgZNJDwTGn\"><field name=\"text\">module*</field></block></statement><next><block type=\"option\" id=\"rs6A1WH3nWBiieDydthf\"><statement name=\"blocks\"><block type=\"encode\" id=\"9HJ8glvnW2YBAhJRrGSv\"><field name=\"text\">module+</field></block></statement><next><block type=\"option\" id=\"Yp1DLzh5OH8eZy7d6q1q\"><statement name=\"blocks\"><block type=\"encode\" id=\"GbyfRrGwsEoHzUpBzNgB\"><field name=\"text\">only-in</field></block></statement><next><block type=\"option\" id=\"C9H8H6KEGrxYlVPcolQB\"><statement name=\"blocks\"><block type=\"encode\" id=\"Jdb8IUEGyfhvSbADNPnf\"><field name=\"text\">only-meta-in</field></block></statement><next><block type=\"option\" id=\"vjnnlaNEDnNLPhRYllRB\"><statement name=\"blocks\"><block type=\"encode\" id=\"vuTbATgAwVsdh5Hio2mr\"><field name=\"text\">open-input-file</field></block></statement><next><block type=\"option\" id=\"CRrdrPksaSbBbUtRUQgj\"><statement name=\"blocks\"><block type=\"encode\" id=\"MjK9rKlHTObzl5qXy8RR\"><field name=\"text\">open-input-output-file</field></block></statement><next><block type=\"option\" id=\"6t8UHvC1j7HAKhl8eQnj\"><statement name=\"blocks\"><block type=\"encode\" id=\"dC29gkmw5OvR9VZsym8w\"><field name=\"text\">open-output-file</field></block></statement><next><block type=\"option\" id=\"yDhmbNqALZXtNYb7Zna2\"><statement name=\"blocks\"><block type=\"encode\" id=\"NIf68bGaTnizRjtzGDt3\"><field name=\"text\">or</field></block></statement><next><block type=\"option\" id=\"M0Vk2cKmO6WrOXTH734J\"><statement name=\"blocks\"><block type=\"encode\" id=\"Yi0NxGCwuCcAmWcyP8N9\"><field name=\"text\">parameterize</field></block></statement><next><block type=\"option\" id=\"9rSiFHlSM8iWPsiWHDt7\"><statement name=\"blocks\"><block type=\"encode\" id=\"dWDdavW4bV7eaBKHoKaM\"><field name=\"text\">parameterize*</field></block></statement><next><block type=\"option\" id=\"YgAZuFGt1geBYjIUl2P5\"><statement name=\"blocks\"><block type=\"encode\" id=\"JrCJAaWu6fFxguP3L3wu\"><field name=\"text\">parameterize-break</field></block></statement><next><block type=\"option\" id=\"pnvBkc5wOEBZrD2BWgEU\"><statement name=\"blocks\"><block type=\"encode\" id=\"zQPX1ep0lVUIgGSN3F6S\"><field name=\"text\">planet</field></block></statement><next><block type=\"option\" id=\"pNwxz54xH8d6Lpk9yeNI\"><statement name=\"blocks\"><block type=\"encode\" id=\"EKgSAy8IYYRvmtvseRYb\"><field name=\"text\">prefix-in</field></block></statement><next><block type=\"option\" id=\"r1rK1MSr64tfpmWzu3JR\"><statement name=\"blocks\"><block type=\"encode\" id=\"eTcBnh65heNqLaBN9SP8\"><field name=\"text\">prefix-out</field></block></statement><next><block type=\"option\" id=\"jmd3IlZNqJShDgBwW3KA\"><statement name=\"blocks\"><block type=\"encode\" id=\"ysJeGDnZphBRL8BGXRG1\"><field name=\"text\">protect-out</field></block></statement><next><block type=\"option\" id=\"bSvZb39ht5iZCBjnq4Hb\"><statement name=\"blocks\"><block type=\"encode\" id=\"Athnekpiy5sXMqhnXlMR\"><field name=\"text\">provide</field></block></statement><next><block type=\"option\" id=\"cS6WTEpmQYxpEviXwE6A\"><statement name=\"blocks\"><block type=\"encode\" id=\"L5qQ3X36TOrNQgXJtskc\"><field name=\"text\">quasiquote</field></block></statement><next><block type=\"option\" id=\"xO42D0A6Al3cuV6RurOD\"><statement name=\"blocks\"><block type=\"encode\" id=\"4l4xdwKHK6VAEKUVqNLU\"><field name=\"text\">quasisyntax</field></block></statement><next><block type=\"option\" id=\"eOOsxRcq1BI0kUr4cxkP\"><statement name=\"blocks\"><block type=\"encode\" id=\"lOOKB8J1GC6leF3JsDtI\"><field name=\"text\">quasisyntax/loc</field></block></statement><next><block type=\"option\" id=\"kr776aYQEJAhWvIjVYCy\"><statement name=\"blocks\"><block type=\"encode\" id=\"yYFlZGmS2Hsny1WtZoOt\"><field name=\"text\">quote</field></block></statement><next><block type=\"option\" id=\"WhvIaalqLTYiymbJjW5h\"><statement name=\"blocks\"><block type=\"encode\" id=\"kjv44G8ySnODPcIMNAv4\"><field name=\"text\">quote-syntax</field></block></statement><next><block type=\"option\" id=\"LzmzA5A2jXzQHqxM87dc\"><statement name=\"blocks\"><block type=\"encode\" id=\"Ox4f0PCuITt1bpqeMc6H\"><field name=\"text\">quote-syntax/prune</field></block></statement><next><block type=\"option\" id=\"selQivBYadqFmD9OxhUZ\"><statement name=\"blocks\"><block type=\"encode\" id=\"fvemjnwq9oOaBavHiJER\"><field name=\"text\">regexp-match*</field></block></statement><next><block type=\"option\" id=\"1JeTm0E18A0UlV0oolzr\"><statement name=\"blocks\"><block type=\"encode\" id=\"7iV91aNj9G9DO25YMSEi\"><field name=\"text\">regexp-match-peek-positions*</field></block></statement><next><block type=\"option\" id=\"aeGgkosDQcH7ftoXQtbA\"><statement name=\"blocks\"><block type=\"encode\" id=\"qqR4PBDrnXr9gnEHaFyR\"><field name=\"text\">regexp-match-positions*</field></block></statement><next><block type=\"option\" id=\"XEIMJ2Y86NC4tL8a9CW6\"><statement name=\"blocks\"><block type=\"encode\" id=\"hC0kcz1Pjc2iFAyMruH2\"><field name=\"text\">relative-in</field></block></statement><next><block type=\"option\" id=\"YdwCo132QBhBzOuWRZf0\"><statement name=\"blocks\"><block type=\"encode\" id=\"jZ2gSKXByY2JtSrVplAp\"><field name=\"text\">rename-in</field></block></statement><next><block type=\"option\" id=\"XEi7Ox6i88a3FAjLLxix\"><statement name=\"blocks\"><block type=\"encode\" id=\"w2eVnaQci1TS7mhYImym\"><field name=\"text\">rename-out</field></block></statement><next><block type=\"option\" id=\"uZQDVbwhTwqelNOJaWEg\"><statement name=\"blocks\"><block type=\"encode\" id=\"6ehlJ9bJg1tShmI0dWoc\"><field name=\"text\">require</field></block></statement><next><block type=\"option\" id=\"1vzpL6cr8h7Nl2J0j4nu\"><statement name=\"blocks\"><block type=\"encode\" id=\"OoHYWNeD9fLn8evMBiLh\"><field name=\"text\">set!</field></block></statement><next><block type=\"option\" id=\"KEf62Hm3MXQIbyF8OiGy\"><statement name=\"blocks\"><block type=\"encode\" id=\"nMi6d6S0O2EWNtqq7cj1\"><field name=\"text\">set!-values</field></block></statement><next><block type=\"option\" id=\"EfFlWB1UZSXhe89yRvR7\"><statement name=\"blocks\"><block type=\"encode\" id=\"hot09D18rXHdUy0E8wF8\"><field name=\"text\">sort</field></block></statement><next><block type=\"option\" id=\"8TjFtscg6EfAAQCcuzmb\"><statement name=\"blocks\"><block type=\"encode\" id=\"lFObOgmZ3UblIWsNE2j1\"><field name=\"text\">srcloc</field></block></statement><next><block type=\"option\" id=\"LneiHxc5KANB58FspAO5\"><statement name=\"blocks\"><block type=\"encode\" id=\"CUOiyHHIGvngEIabpzGK\"><field name=\"text\">struct-copy</field></block></statement><next><block type=\"option\" id=\"fBFyZ0GzWL9GAbA49kH0\"><statement name=\"blocks\"><block type=\"encode\" id=\"wVtxUxu9LDtCh3552Lmy\"><field name=\"text\">struct-field-index</field></block></statement><next><block type=\"option\" id=\"p6gsX2f92oe0q1pQIRPm\"><statement name=\"blocks\"><block type=\"encode\" id=\"apSQfiaPcJ5Cuu1Gv62Z\"><field name=\"text\">struct-out</field></block></statement><next><block type=\"option\" id=\"CzSvLDhnl1Ql53U5jKgC\"><statement name=\"blocks\"><block type=\"encode\" id=\"LbP0GLGTXZ2EduP8vmKQ\"><field name=\"text\">submod</field></block></statement><next><block type=\"option\" id=\"3veEn0tCMWXbvJfAqJrd\"><statement name=\"blocks\"><block type=\"encode\" id=\"mxAitkYOP24RM9F1zs8I\"><field name=\"text\">syntax</field></block></statement><next><block type=\"option\" id=\"Jd4PVyjh5gJnKGEfVsC2\"><statement name=\"blocks\"><block type=\"encode\" id=\"7BxI4VfdquDAgT53e9oU\"><field name=\"text\">syntax-case</field></block></statement><next><block type=\"option\" id=\"LacWDJN4MFfiKgITT3lt\"><statement name=\"blocks\"><block type=\"encode\" id=\"jjNKPYXTuJHy9MoyMpuZ\"><field name=\"text\">syntax-case*</field></block></statement><next><block type=\"option\" id=\"stSkvYEDVykzqAVyTbmG\"><statement name=\"blocks\"><block type=\"encode\" id=\"CJGvaHRZXYYhi4ChTVSU\"><field name=\"text\">syntax-id-rules</field></block></statement><next><block type=\"option\" id=\"b7MSBPQWSEBdc6DUrZMw\"><statement name=\"blocks\"><block type=\"encode\" id=\"D7SkVLrvVYANeAZVFEHe\"><field name=\"text\">syntax-rules</field></block></statement><next><block type=\"option\" id=\"qwQ6er351l7hO8BXddxR\"><statement name=\"blocks\"><block type=\"encode\" id=\"FZ3N2FPg9O8R8D8BuSkz\"><field name=\"text\">syntax/loc</field></block></statement><next><block type=\"option\" id=\"1ELayd03NoIk4aA7GXeS\"><statement name=\"blocks\"><block type=\"encode\" id=\"UGeE9InRUBYSA95v39EV\"><field name=\"text\">time</field></block></statement><next><block type=\"option\" id=\"Ig3R7kOaod2Tf3Be5RSk\"><statement name=\"blocks\"><block type=\"encode\" id=\"PG7RUlbA4zT2maRDMPVj\"><field name=\"text\">unless</field></block></statement><next><block type=\"option\" id=\"bjtEvDYinr7c4jAOBgby\"><statement name=\"blocks\"><block type=\"encode\" id=\"XEmbmHLeIWuoierSFppa\"><field name=\"text\">unquote</field></block></statement><next><block type=\"option\" id=\"29PtjOXrLow9pklCqcsE\"><statement name=\"blocks\"><block type=\"encode\" id=\"Mr2i2uNia5CYqBNm4RXi\"><field name=\"text\">unquote-splicing</field></block></statement><next><block type=\"option\" id=\"CSphIEX4N2WcemyLN9yd\"><statement name=\"blocks\"><block type=\"encode\" id=\"xA3DPV5rNfVMHzkcQHIm\"><field name=\"text\">unsyntax</field></block></statement><next><block type=\"option\" id=\"OqvS08WYgEMWBmeVmt41\"><statement name=\"blocks\"><block type=\"encode\" id=\"a1rM8avweQ2DKouOzOSK\"><field name=\"text\">unsyntax-splicing</field></block></statement><next><block type=\"option\" id=\"J1S8cI3njMcbTvBf4YrZ\"><statement name=\"blocks\"><block type=\"encode\" id=\"mohTFxijHVAiPTDzjVKE\"><field name=\"text\">when</field></block></statement><next><block type=\"option\" id=\"qbD0tmyhxIFM0JYQc7sC\"><statement name=\"blocks\"><block type=\"encode\" id=\"owzWnYZRtj4jPMLFp2z6\"><field name=\"text\">with-continuation-mark</field></block></statement><next><block type=\"option\" id=\"3wOP1GepOZDnxzeBqYTB\"><statement name=\"blocks\"><block type=\"encode\" id=\"5YkTg22vnPFmEntB7v34\"><field name=\"text\">with-handlers</field></block></statement><next><block type=\"option\" id=\"uMavqbzA7rAZx90pa5SK\"><statement name=\"blocks\"><block type=\"encode\" id=\"s1KB036QzSbkN9BiAyGJ\"><field name=\"text\">with-handlers*</field></block></statement><next><block type=\"option\" id=\"N9GXNW3tAOQ5noUsnb2j\"><statement name=\"blocks\"><block type=\"encode\" id=\"lRa9kR0j38HTQ48IaeXc\"><field name=\"text\">with-input-from-file</field></block></statement><next><block type=\"option\" id=\"Y0L0is9Hwp7F8jp3uJse\"><statement name=\"blocks\"><block type=\"encode\" id=\"D50SKKGHPgP0GOCANm0O\"><field name=\"text\">with-output-to-file</field></block></statement><next><block type=\"option\" id=\"RDoL4ZYIJ8FdmHR1Z0zb\"><statement name=\"blocks\"><block type=\"encode\" id=\"tpizq9oZMV4zTN0BnD5H\"><field name=\"text\">with-syntax</field></block></statement><next><block type=\"option\" id=\")S@RdTlc8:[mB1@lh4|^\"><statement name=\"blocks\"><block type=\"encode\" id=\"@Q216Y}q14al}vzh[OC0\"><field name=\"text\">λ</field></block></statement></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block></statement><next><block type=\"boundary\" id=\"5Wv1@H?}7U?V2|W1EK5U\"></block></next></block></next></block></next></block></statement></block></xml>","playgroundText":"#lang racket/base\n\n'(hello world)\n(require syntax/parse/pre\n         \"../private/parse-classes.rkt\"\n         \"../private/syntax-properties.rkt\"\n         (for-label \"colon.rkt\"))\n(provide (all-defined-out))\n\n;; Data definitions\n;; ----------------\n;;\n;; A LambdaKeywords is a\n;;   (lambda-kws (Listof Keyword) (Listof Keyword))\n(struct lambda-kws (mand opt))\n\n;; interp.\n;;   - the first list contains the mandatory keywords\n;;   - the second list contains the optional keywords\n;;\n;; The TR lambda form sets this as a syntax property on lambda expansions\n;; to allow TR to check for missing keywords.\n\n(define-literal-set colon #:for-label (:))\n\n(define-splicing-syntax-class annotated-name\n  #:attributes (name ty ann-name)\n  #:description \"type-annotated identifier\"\n  #:literal-sets (colon)\n  (pattern [~seq name:id : ty]\n           #:with ann-name (type-label-property #'name #'ty))\n  (pattern name:id\n           #:attr *ty (type-label-property #'name)\n           #:when (attribute *ty)\n           #:attr ty (datum->syntax #'name (attribute *ty))\n           #:with ann-name #'name))\n\n(define-splicing-syntax-class optionally-annotated-name\n  #:attributes (name ty ann-name)\n  #:description \"optionally type-annotated identifier\"\n  #:literal-sets (colon)\n  (pattern n:annotated-name\n           #:with name #'n.name\n           #:with ty #'n.ty\n           #:with ann-name #'n.ann-name)\n  (pattern n:id\n           #:with name #'n\n           #:attr ty #f\n           #:with ann-name #'n))\n\n(define-splicing-syntax-class (param-annotated-name trans)\n  #:attributes (name ty ann-name)\n  #:description \"type-annotated identifier\"\n  #:literal-sets (colon)\n  (pattern [~seq name:id : ty]\n           #:with ann-name (type-label-property #'name (trans #'ty))))\n\n(define-syntax-class annotated-binding\n  #:attributes (name ty ann-name binding rhs)\n  (pattern (~and whole [:annotated-name rhs:expr])\n           #:with binding (syntax/loc #'whole [ann-name rhs])))\n\n(define-syntax-class optionally-annotated-binding\n  #:attributes (name ann-name binding rhs)\n  #:description \"optionally type-annotated binding\"\n  #:literal-sets (colon)\n  (pattern b:annotated-binding\n           #:with name #'b.name\n           #:with ann-name #'b.ann-name\n           #:with binding #'b.binding\n           #:with rhs #'b.rhs)\n  (pattern (~and whole [n:id rhs:expr])\n           #:with name #'n\n           #:with ann-name #'n\n           #:with binding #'whole))\n\n(define-syntax-class annotated-values-binding\n  #:attributes ((name 1) (ty 1) (ann-name 1) binding rhs)\n  (pattern (~and whole [(~describe \"sequence of type-annotated identifiers\" ([:annotated-name] ...)) rhs:expr])\n           #:with binding (syntax/loc #'whole [(ann-name ...) rhs])))\n\n(define-syntax-class optionally-annotated-values-binding\n  #:attributes ((name 1) (ann-name 1) binding rhs)\n  (pattern b:annotated-values-binding\n           #:with (name ...) #'(b.name ...)\n           #:with (ann-name ...) #'(b.ann-name ...)\n           #:with binding #'b.binding\n           #:with rhs #'b.rhs)\n  (pattern (~and whole [(~describe \"sequence of optionally type-annotated identifiers\" (n:optionally-annotated-formal ...)) rhs:expr])\n           #:with (name ...) #'(n.name ...)\n           #:with (ann-name ...) #'(n.ann-name ...)\n           #:with binding #'whole))\n\n(define-splicing-syntax-class annotated-star-rest\n  #:attributes (name ann-name ty formal-ty)\n  #:literal-sets (colon)\n  (pattern (~seq name:id : ty s:star)\n           #:with formal-ty #'(ty s)\n           #:with ann-name (type-label-property #'name #'ty)))\n\n(define-splicing-syntax-class annotated-dots-rest\n  #:attributes (name ann-name bound ty formal-ty)\n  #:literal-sets (colon)\n  (pattern (~seq name:id : ty bnd:ddd/bound)\n           #:with formal-ty #'(ty . bnd)\n           #:attr bound (attribute bnd.bound)\n           #:with ann-name (type-dotted-property\n                             (type-label-property #'name #'ty)\n                             (attribute bnd.bound))))\n\n(define-syntax-class annotated-formal\n  #:description \"annotated variable of the form [x : T]\"\n  #:opaque\n  #:attributes (name ty ann-name)\n  (pattern [:annotated-name]))\n\n(define-syntax-class optionally-annotated-formal\n  #:description \"optionally annotated variable of the form [x : T] or just x\"\n  #:opaque\n  #:attributes (name ty ann-name)\n  (pattern f:annotated-formal\n           #:with name #'f.name\n           #:attr ty #'f.ty\n           #:with ann-name #'f.ann-name)\n  (pattern f:id\n           #:with name #'f\n           #:attr ty #f\n           #:with ann-name #'f))\n\n(define-syntax-class annotated-formals\n  #:attributes (ann-formals (arg-ty 1))\n  #:literal-sets (colon)\n  (pattern (n:annotated-formal ...)\n           #:with ann-formals #'(n.ann-name ...)\n           #:with (arg-ty ...) #'(n.ty ...))\n  (pattern (n:annotated-formal ... (~describe \"dotted or starred type\"\n                                              (~or rest:annotated-star-rest rest:annotated-dots-rest)))\n           #:with ann-formals #'(n.ann-name ... . rest.ann-name)\n           #:with (arg-ty ...) #'(n.ty ... . rest.formal-ty)))\n\n(define-syntax-class opt-lambda-annotated-formal\n  #:description \"annotated variable, potentially with a default value\"\n  #:opaque\n  #:attributes (name ty ann-name)\n  (pattern [:annotated-name])\n  (pattern [n:annotated-name val]\n           #:with name #'n.name\n           #:with ty #'n.name\n           #:with ann-name #'(n.ann-name val)))\n\n(define-syntax-class opt-lambda-annotated-formals\n  #:attributes (ann-formals (arg-ty 1))\n  #:literal-sets (colon)\n  (pattern (n:opt-lambda-annotated-formal ...)\n           #:with ann-formals #'(n.ann-name ...)\n           #:with (arg-ty ...) #'(n.ty ...))\n  (pattern (n:opt-lambda-annotated-formal ...\n            (~describe \"dotted or starred type\"\n                       (~or rest:annotated-star-rest rest:annotated-dots-rest)))\n           #:with ann-formals #'(n.ann-name ... . rest.ann-name)\n           #:with (arg-ty ...) #'(n.ty ... . rest.formal-ty)))\n\n(define-splicing-syntax-class standalone-annotation\n  #:literal-sets (colon)\n  (pattern (~seq : t)\n           #:with ty #'t))\n(define-splicing-syntax-class optional-standalone-annotation\n  (pattern (~optional a:standalone-annotation)\n           #:attr ty (if (attribute a) #'a.ty #f)))\n\n(define-syntax-class type-variables\n  #:attributes ((vars 1))\n  #:description \"a sequence of type variables\"\n  (pattern (vars:id ...)\n           #:fail-when (check-duplicate-identifier (syntax->list #'(vars ...)))\n           \"duplicate type variable declaration\"))\n\n(define-splicing-syntax-class lambda-type-vars\n  #:description \"optional type parameters\"\n  #:attributes (type-vars)\n  (pattern (~seq (~or #:forall #:∀) (var:id ...))\n           #:attr type-vars #'(var ...)))\n\n(define-splicing-syntax-class maybe-lambda-type-vars\n  #:description \"optional type parameters\"\n  #:attributes (type-vars)\n  (pattern :lambda-type-vars)\n  (pattern (~seq) #:attr type-vars #f))\n\n(define-splicing-syntax-class kw-formal\n  #:attributes (form id default type kw)\n  #:literal-sets (colon)\n  (pattern (~seq kw:keyword id:id)\n           #:with form #'(kw id)\n           #:attr default #f\n           #:attr type #f)\n  (pattern (~seq kw:keyword [id:id default:expr])\n           #:with form #'(kw [id default])\n           #:attr type #f)\n  (pattern (~seq kw:keyword [id:id : type:expr])\n           #:with form #`(kw #,(type-label-property #'id #'type))\n           #:attr default #f)\n  (pattern (~seq kw:keyword [id:id : type:expr default:expr])\n           #:with form #`(kw [#,(type-label-property #'id #'type) default])))\n\n(define-splicing-syntax-class mand-formal\n  #:description \"lambda argument\"\n  #:attributes (form id default type kw)\n  #:literal-sets (colon)\n  (pattern id:id\n           #:with form #'(id)\n           #:attr default #f\n           #:attr type #f\n           #:attr kw #f)\n  (pattern [id:id : type:expr]\n           #:with form #`(#,(type-label-property #'id #'type))\n           #:attr default #f\n           #:attr kw #f)\n  (pattern :kw-formal))\n\n(define-splicing-syntax-class opt-formal\n  #:description \"optional lambda argument\"\n  #:attributes (form id default type kw)\n  #:literal-sets (colon)\n  (pattern [id:id default:expr]\n           #:with form #'([id default])\n           #:attr type #f\n           #:attr kw #f)\n  (pattern [id:id : type:expr default:expr]\n           #:with form #`([#,(type-label-property #'id #'type) default])\n           #:attr kw #f)\n  (pattern :kw-formal))\n\n(define-syntax-class rest-arg\n  #:description \"rest argument\"\n  #:attributes (form)\n  #:literal-sets (colon)\n  ;; specifying opaque here helps produce a better error\n  ;; message for optional argumenents, but produces worse\n  ;; error messages for rest arguments.\n  #:opaque\n  (pattern rest:id #:attr form #'rest)\n  (pattern (rest:id : type:expr :star)\n           #:attr form (type-label-property #'rest #'type))\n  (pattern (rest:id : type:expr bnd:ddd/bound)\n           #:attr bound (attribute bnd.bound)\n           #:attr form (type-dotted-property\n                        (type-label-property #'rest #'type)\n                        (attribute bound))))\n\n(define-syntax-class lambda-formals\n  #:attributes (opt-property kw-property erased)\n  (pattern (~or (mand:mand-formal ... opt:opt-formal ... . rest:rest-arg)\n                (~and (mand:mand-formal ... opt:opt-formal ...)\n                      (~bind [rest.form #'()])))\n           #:attr kw-property\n           ;; separate raw keywords into mandatory and optional and\n           ;; put them in a struct for later use by tc-expr\n           (let ([kws (append (attribute mand.kw)\n                              (attribute opt.kw))]\n                 [opt?s (append (attribute mand.default)\n                                (attribute opt.default))])\n             (define-values (mand-kws opt-kws)\n               (for/fold ([mand-kws '()]\n                          [opt-kws '()])\n                         ([kw (in-list kws)]\n                          [opt? (in-list opt?s)]\n                          #:when kw)\n                 (if opt?\n                     (values mand-kws (cons (syntax-e kw) opt-kws))\n                     (values (cons (syntax-e kw) mand-kws) opt-kws))))\n             (and (or (not (null? mand-kws))\n                      (not (null? opt-kws)))\n                  (lambda-kws mand-kws opt-kws)))\n           #:attr opt-property\n           (list (length (attribute mand)) (length (attribute opt)))\n           #:attr erased\n           (with-syntax ([((mand-form ...) ...) #'(mand.form ...)]\n                         [((opt-form ...) ...) #'(opt.form ...)])\n             (syntax (mand-form ... ... opt-form ... ... . rest.form)))))\n\n(define-syntax-class curried-formals\n  #:attributes (erased fun-name)\n  (pattern fun:id\n           #:with fun-name #'fun\n           #:with erased #'fun)\n  (pattern (fun:curried-formals . formals:lambda-formals)\n           #:with fun-name #'fun.fun-name\n           #:with erased #`(fun.erased . #,(attribute formals.erased))))\n\n(define-splicing-syntax-class return-ann\n  #:description \"return type annotation\"\n  #:literal-sets (colon)\n  (pattern (~seq : type:expr)))\n(pattern (~seq) #:attr type #f)\n"}